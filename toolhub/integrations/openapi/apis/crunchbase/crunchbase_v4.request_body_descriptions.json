{"/searches/organizations": "The requestBody for the `/searches/organizations` endpoint in the provided OpenAPI schema is designed to receive a JSON object that defines complex search query parameters to filter and retrieve specific organization entities from a dataset. Below is a detailed description of the requestBody structure, including nested fields and examples to help you successfully call the endpoint for a variety of use cases.\n\n### Request Body Structure\n\nThe requestBody expects a JSON object with the following structure:\n\n- `field_ids`: An array of strings specifying the fields to include as columns in the search result entities. These fields represent various attributes of the organizations you're interested in retrieving. For example, `[\"identifier\", \"categories\", \"location_identifiers\", \"short_description\", \"rank_org\"]`.\n\n- `order`: An array of objects that define the order in which the search results should be returned. Each object in the array should specify a `field_id` to sort on and a `sort` direction, which can be either `\"asc\"` for ascending or `\"desc\"` for descending. Optionally, you can specify how null values should be sorted with the `nulls` key, which can be `\"first\"` or `\"last\"`.\n\n- `query`: An array of objects where each object represents a search criterion or predicate. Each predicate object includes:\n  - `type`: The type of query, which should be `\"predicate\"` for all predicates.\n  - `field_id`: The field to operate on, such as `\"funding_total\"` or `\"location_identifiers\"`.\n  - `operator_id`: The operation to perform, such as `\"between\"`, `\"includes\"`, or `\"eq\"`.\n  - `values`: An array of values that the `field_id` should be compared against, with data types matching the `field_id` type. For monetary fields, include both `value` and `currency`.\n\n- `limit`: An integer that specifies the number of rows to return. The default is 100, with a minimum of 1 and a maximum that may vary (e.g., 2000).\n\n- `before_id`: A string in UUID format used to paginate search results to the previous page. It should be the UUID of the first item in the current page.\n\n- `after_id`: A string in UUID format used to paginate search results to the next page. It should be the UUID of the last item in the current page.\n\n### Examples\n\nTwo examples are provided in the schema:\n\n1. **Companies in Europe with funding total between 25m and 100m USD**\n   ```json\n   {\n     \"field_ids\": [\"identifier\", \"categories\", \"location_identifiers\", \"short_description\", \"rank_org\"],\n     \"order\": [{\"field_id\": \"rank_org\", \"sort\": \"asc\"}],\n     \"query\": [\n       {\n         \"type\": \"predicate\",\n         \"field_id\": \"funding_total\",\n         \"operator_id\": \"between\",\n         \"values\": [{\"value\": 25000000, \"currency\": \"usd\"}, {\"value\": 100000000, \"currency\": \"usd\"}]\n       },\n       {\n         \"type\": \"predicate\",\n         \"field_id\": \"location_identifiers\",\n         \"operator_id\": \"includes\",\n         \"values\": [\"6106f5dc-823e-5da8-40d7-51612c0b2c4e\"]\n       },\n       {\n         \"type\": \"predicate\",\n         \"field_id\": \"facet_ids\",\n         \"operator_id\": \"includes\",\n         \"values\": [\"company\"]\n       }\n     ],\n     \"limit\": 50\n   }\n   ```\n\n2. **Biotech companies with number of employees between 101 and 250**\n   ```json\n   {\n     \"field_ids\": [\"identifier\", \"categories\", \"location_identifiers\", \"short_description\", \"rank_org\"],\n     \"order\": [{\"field_id\": \"rank_org\", \"sort\": \"asc\"}],\n     \"query\": [\n       {\n         \"type\": \"predicate\",\n         \"field_id\": \"num_employees_enum\",\n         \"operator_id\": \"includes\",\n         \"values\": [\"c_00101_00250\"]\n       },\n       {\n         \"type\": \"predicate\",\n         \"field_id\": \"categories\",\n         \"operator_id\": \"includes\",\n         \"values\": [\"58842728-7ab9-5bd1-bb67-e8e55f6520a0\"]\n       }\n     ],\n     \"limit\": 50\n   }\n   ```\n\n### Usage\n\nTo use this endpoint, you would need to send a POST request to `/searches/organizations` with a JSON payload that matches the structure described above. The payload should be tailored to the specific search criteria you want to apply, using the appropriate `field_ids`, `order`, `query`, and pagination parameters (`limit`, `before_id`, `after_id`) to filter and sort the results according to your use case.", "/searches/people": "The `/searches/people` endpoint allows clients to search for Person entities by defining complex filtering criteria within the request body. The request must be a POST request with a content type of `application/json`.\n\n### Request Body Schema:\nThe request body must conform to the `EntitySearch` schema, which includes the following fields:\n\n- `field_ids` (required): An array of field ID strings that specify which fields to include as columns in the search result entities.\n- `query` (required): An array of `Predicate` objects that define the search criteria.\n- `order`: An array of `Order` objects that specify the order in which the search results should be returned.\n- `limit`: An integer specifying the number of rows to return. The default is 100, and the maximum is 2000.\n- `before_id`: A UUID in string format used to paginate search results to the previous page.\n- `after_id`: A UUID in string format used to paginate search results to the next page.\n\n### Predicate Object:\nEach `Predicate` object within the `query` array must include the following:\n\n- `type`: Must be set to \"predicate\".\n- `field_id`: The field to operate on.\n- `operator_id`: The operation to perform, which must be one of the defined `OperatorsEnum` values.\n- `values`: An array of values with a data type matching the `field_id` type.\n\n### Order Object:\nEach `Order` object within the `order` array must include the following:\n\n- `field_id`: Name of the field to sort on.\n- `sort`: Direction of sorting, either \"asc\" or \"desc\".\n- `nulls`: Whether to include null values at the beginning or end of the sort, either \"first\" or \"last\".\n\n### OperatorsEnum:\nThe `OperatorsEnum` defines the following possible operators:\n\n- `blank`\n- `eq` (equal)\n- `not_eq` (not equal)\n- `gt` (greater than)\n- `gte` (greater than or equal)\n- `lt` (less than)\n- `lte` (less than or equal)\n- `starts` (starts with)\n- `contains`\n- `between`\n- `includes`\n- `not_includes`\n- `includes_all`\n- `not_includes_all`\n- `domain_eq`\n- `domain_blank`\n\n### Example Request Body:\n```json\n{\n  \"field_ids\": [\"identifier\", \"first_name\", \"last_name\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"first_name\",\n      \"operator_id\": \"starts\",\n      \"values\": [\"John\"]\n    },\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"last_name\",\n      \"operator_id\": \"eq\",\n      \"values\": [\"Doe\"]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"last_name\",\n      \"sort\": \"asc\"\n    }\n  ],\n  \"limit\": 50\n}\n```\n\nThis example would search for Person entities where the first name starts with \"John\" and the last name is exactly \"Doe\", returning up to 50 results sorted by last name in ascending order.\n\n### Notes:\n- The `before_id` and `after_id` fields are used for pagination and should not be provided simultaneously.\n- The `limit` field must be within the allowed range if specified.\n- The `order` field is optional; if not provided, the default sorting order will be applied.", "/searches/funding_rounds": "The requestBody for the `/searches/funding_rounds` endpoint is described as \"Search Query Parameters\" and is required for the POST request. It must be sent as JSON content with the following structure:\n\n- `field_ids`: An array of strings representing the field IDs to include as columns in the search result entities. This is a required field.\n- `query`: An array of `Predicate` objects that define the search criteria. Each `Predicate` must include:\n  - `type`: A string that must be set to \"predicate\".\n  - `field_id`: A string indicating the field to operate on.\n  - `operator_id`: An operator from the `OperatorsEnum`, which includes options like \"eq\" (equal), \"contains\" (contains), \"gt\" (greater than), etc.\n  - `values`: An array of values that match the data type of the `field_id`. The values are the criteria that the field must meet based on the `operator_id`.\n- `order`: An array of `Order` objects that specify the order in which the search results should be returned. Each `Order` object includes:\n  - `field_id`: The field name to sort on.\n  - `sort`: The direction of sorting, either \"asc\" (ascending) or \"desc\" (descending).\n  - `nulls`: Where to include null values in the sort, either \"first\" or \"last\".\n- `limit`: An integer indicating the number of rows to return. The default is 100, with a minimum of 1 and a maximum of 2000.\n- `before_id`: A string in UUID format used to paginate search results to the previous page. It should be the UUID of the first item in the current page. It cannot be provided simultaneously with `after_id`.\n- `after_id`: A string in UUID format used to paginate search results to the next page. It should be the UUID of the last item in the current page. It cannot be provided simultaneously with `before_id`.\n\nHere is an example of a requestBody JSON that searches for funding rounds with a specific amount raised and sorts the results by the announced date in descending order:\n\n```json\n{\n  \"field_ids\": [\"identifier\", \"money_raised\", \"announced_on\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"money_raised\",\n      \"operator_id\": \"gte\",\n      \"values\": [{\"value\": 1000000}]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"announced_on\",\n      \"sort\": \"desc\"\n    }\n  ],\n  \"limit\": 50\n}\n```\n\nIn this example, the search is for funding rounds where at least $1,000,000 was raised, and the results are limited to 50 records, sorted by the announced date from newest to oldest.", "/searches/acquisitions": "The requestBody for the `/searches/acquisitions` endpoint in the OpenAPI schema is designed to receive a JSON object that defines a search query for Acquisition entities. The requestBody is required and must be of type `application/json`. Below is a detailed description of the requestBody, including nested fields and examples.\n\n### Request Body Fields:\n\n- `field_ids`: An array of field_id strings that specify the fields to include as columns in the search result entities. This field is required.\n- `query`: An array of Predicate objects that define the search criteria to be applied to the Acquisition entities. This array forms the complex filtering logic for the search.\n- `order`: An array of Order objects that specify how the search results should be ordered.\n- `limit`: An integer that specifies the number of rows to return. The default is 100, and the maximum allowed is 2000.\n- `before_id`: A string in UUID format used for paginating search results to the previous page. It should be the UUID of the first item in the current page. It cannot be provided simultaneously with `after_id`.\n- `after_id`: A string in UUID format used for paginating search results to the next page. It should be the UUID of the last item in the current page. It cannot be provided simultaneously with `before_id`.\n\n### Nested Fields:\n\n#### Predicate Object:\n- `type`: A string that must be set to \"predicate\" to indicate the type of query.\n- `field_id`: A string that specifies the field to which the search criterion is applied.\n- `operator_id`: An operator from the OperatorsEnum that defines the comparison operation to be performed.\n- `values`: An array containing values that match the data type of the `field_id`. These values are used in the comparison operation specified by `operator_id`.\n\n#### Order Object:\n- `field_id`: A string that specifies the name of the field to sort on.\n- `sort`: A string that specifies the direction of sorting. It can be \"asc\" for ascending or \"desc\" for descending. The default is \"asc\".\n- `nulls`: A string that specifies where to place null values in the sort order. It can be \"first\" to place them at the beginning or \"last\" to place them at the end. The default is \"last\".\n\n### Examples:\n\n#### Example 1: Search for Acquisitions with a specific acquirer name:\n```json\n{\n  \"field_ids\": [\"identifier\", \"acquiree_identifier\", \"price\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"acquirer_identifier\",\n      \"operator_id\": \"eq\",\n      \"values\": [{\"value\": \"Facebook, Inc.\"}]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"announced_on\",\n      \"sort\": \"desc\"\n    }\n  ],\n  \"limit\": 10\n}\n```\n\n#### Example 2: Search for Acquisitions within a specific price range:\n```json\n{\n  \"field_ids\": [\"identifier\", \"acquiree_identifier\", \"price\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"price\",\n      \"operator_id\": \"between\",\n      \"values\": [\n        {\"value\": 1000000},\n        {\"value\": 5000000}\n      ]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"price\",\n      \"sort\": \"asc\"\n    }\n  ],\n  \"limit\": 5\n}\n```\n\n#### Example 3: Search for Acquisitions with pagination to the next page:\n```json\n{\n  \"field_ids\": [\"identifier\", \"acquiree_identifier\", \"price\"],\n  \"query\": [],\n  \"order\": [\n    {\n      \"field_id\": \"announced_on\",\n      \"sort\": \"desc\"\n    }\n  ],\n  \"after_id\": \"last-item-uuid-from-previous-page\",\n  \"limit\": 20\n}\n```\n\nThese examples demonstrate how to structure the requestBody to perform searches with various filters, sorting, and pagination on the Acquisition entities using the `/searches/acquisitions` endpoint.", "/searches/investments": "The requestBody for the POST request to `/searches/investments` is designed to define search query parameters for finding Investment entities. The requestBody is required for the request and must be in `application/json` format. The schema for the requestBody is given by the `$ref` to `#/components/schemas/EntitySearch`. To properly call this endpoint, you'll need to include the following fields in your JSON payload:\n\n- `field_ids`: An array of field ID strings that you want to include as columns in the search result entities. This field is required.\n- `query`: An array of `Predicate` objects that define the search conditions. Each `Predicate` must include:\n  - `type`: The type of query, which must be `\"predicate\"`.\n  - `field_id`: The field to operate on.\n  - `operator_id`: The operator to use for the query, which must be one of the defined `OperatorsEnum`. For example, `\"eq\"` for equal, `\"contains\"` for substring match, etc.\n  - `values`: An array of values with data types matching the `field_id` type. This field contains the actual values to match against the `field_id` using the specified `operator_id`.\n- `order`: (Optional) An array of `Order` objects that specify the sorting of the search results. Each `Order` object should include:\n  - `field_id`: The name of the field to sort on.\n  - `sort`: The direction of sorting, either `\"asc\"` for ascending or `\"desc\"` for descending.\n  - `nulls`: (Optional) Whether to include null values at the beginning or end of the sort, with `\"first\"` to include at the beginning and `\"last\"` to include at the end.\n- `limit`: (Optional) An integer representing the number of rows to return. The default is 100, and the maximum is 2000.\n- `before_id`: (Optional) A UUID string used to paginate search results to the previous page. It should be the UUID of the first item in the current page.\n- `after_id`: (Optional) A UUID string used to paginate search results to the next page. It should be the UUID of the last item in the current page.\n\nHere's an example requestBody in JSON format for searching Investment entities where the `field_id` is \"amount_invested\" and the operation is \"greater than\" a certain value:\n\n```json\n{\n  \"field_ids\": [\"identifier\", \"amount_invested\", \"funding_round_identifier\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"amount_invested\",\n      \"operator_id\": \"gt\",\n      \"values\": [\n        {\n          \"value\": 1000000\n        }\n      ]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"amount_invested\",\n      \"sort\": \"desc\"\n    }\n  ],\n  \"limit\": 50\n}\n```\n\nThis requestBody will return up to 50 Investment entities where the amount invested is greater than 1,000,000, sorted by the amount invested in descending order.", "/searches/events": "The requestBody for the `/searches/events` endpoint is structured to receive a JSON payload that defines the search query for Event entities within the system. The schema for the requestBody is referenced as `EntitySearch`, which is detailed in the components section of the OpenAPI schema provided.\n\nHere is the detailed description of the requestBody for `/searches/events`:\n\n**Required Fields:**\n- `field_ids`: An array of strings representing the fields to include as columns in the search result entities. These field IDs specify which attributes of the Event entities should be returned in the response.\n- `query`: An array of `Predicate` objects that define the search criteria. Each `Predicate` object represents a simple search criterion.\n\n**Optional Fields:**\n- `order`: An array of `Order` objects that specify the order in which the search results should be returned. Each `Order` object contains a `field_id` to sort on, a `sort` direction (either \"asc\" for ascending or \"desc\" for descending), and an optional `nulls` parameter to include null values at the beginning or end of the sort.\n- `limit`: An integer representing the number of rows to return. The default is 100, with a minimum of 1 and a maximum of 2000.\n- `before_id`: A UUID string used to paginate search results to the previous page. It should be the UUID of the first item in the current page. It cannot be provided simultaneously with `after_id`.\n- `after_id`: A UUID string used to paginate search results to the next page. It should be the UUID of the last item in the current page. It cannot be provided simultaneously with `before_id`.\n\n**Predicate Object:**\n- `type`: A string with the value \"predicate\" indicating the type of query.\n- `field_id`: A string representing the field to operate on.\n- `operator_id`: A reference to the `OperatorsEnum` which describes the operator to be used for the query (e.g., \"eq\" for equal, \"contains\" for contains, etc.).\n- `values`: An array of objects with data types matching the `field_id` type, representing the values to be used for the search criterion.\n\n**Order Object:**\n- `field_id`: A string representing the name of the field to sort on.\n- `sort`: A string indicating the direction of sorting (\"asc\" or \"desc\").\n- `nulls`: An optional string to specify whether to include null values at the beginning (\"first\") or end (\"last\") of the sort.\n\n**Example Payload:**\n```json\n{\n  \"field_ids\": [\"name\", \"start_date\", \"end_date\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"location\",\n      \"operator_id\": \"contains\",\n      \"values\": [{\"value\": \"San Francisco\"}]\n    },\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"start_date\",\n      \"operator_id\": \"gte\",\n      \"values\": [{\"value\": \"2023-01-01\"}]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"start_date\",\n      \"sort\": \"asc\"\n    }\n  ],\n  \"limit\": 50,\n  \"after_id\": \"last-uuid-from-previous-page\"\n}\n```\n\nThis example payload requests a search for Event entities located in \"San Francisco\" with a start date greater than or equal to January 1, 2023. The results are ordered by the start date in ascending order, limited to 50 results, and paginated starting after the last UUID from the previous page.", "/searches/press_references": "The requestBody for the `/searches/press_references` endpoint is a JSON object that must adhere to the `EntitySearch` schema. This schema requires you to specify a list of `field_ids` and a `query` array that contains one or more `Predicate` objects, which define the search criteria.\n\nHere's a detailed description of the requestBody structure:\n\n1. `field_ids` (required): An array of strings representing the fields to include as columns in the search result entities. These are the identifiers for the fields you want to retrieve in your search results.\n\n2. `query` (required): An array of `Predicate` objects. Each `Predicate` object represents a search criterion and must contain the following properties:\n   - `type`: A string that must be set to \"predicate\" to indicate the type of query.\n   - `field_id`: A string that specifies the field to operate on. This should match one of the field identifiers defined in the system.\n   - `operator_id`: A string that specifies the operator to use for the search. The operator defines the type of comparison to perform (e.g., \"eq\" for equal, \"contains\" for substring match, etc.).\n   - `values`: An array of objects containing the values to compare against the `field_id` using the specified `operator_id`.\n\n3. `order` (optional): An array of `Order` objects that specify the order in which the search results should be returned. Each `Order` object contains the following properties:\n   - `field_id`: A string that specifies the name of the field to sort on.\n   - `sort`: A string that specifies the direction of sorting, either \"asc\" for ascending or \"desc\" for descending.\n   - `nulls`: A string that specifies where to include null values in the sort, either \"first\" or \"last\".\n\n4. `limit` (optional): An integer that specifies the number of rows to return. The default is 100, with a minimum of 1 and a maximum of 2000.\n\n5. `before_id` (optional): A string in UUID format used to paginate search results to the previous page. It should be the UUID of the first item in the current page.\n\n6. `after_id` (optional): A string in UUID format used to paginate search results to the next page. It should be the UUID of the last item in the current page.\n\nHere's an example of a requestBody that searches for press references related to a specific organization, sorted by the publication date in descending order, with a limit of 10 results:\n\n```json\n{\n  \"field_ids\": [\"identifier\", \"title\", \"posted_on\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"activity_entities\",\n      \"operator_id\": \"includes\",\n      \"values\": [\n        {\n          \"uuid\": \"123e4567-e89b-12d3-a456-426614174000\",\n          \"entity_def_id\": \"organization\",\n          \"value\": \"Example Organization\"\n        }\n      ]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"posted_on\",\n      \"sort\": \"desc\"\n    }\n  ],\n  \"limit\": 10\n}\n```\n\nIn this example, the search is for press references that include the organization with the UUID `123e4567-e89b-12d3-a456-426614174000`. The results will include the identifier, title, and posted_on date for each press reference, sorted by the posted_on date in descending order, with a maximum of 10 results returned.", "/searches/funds": "The `/searches/funds` endpoint allows clients to search for Fund entities based on a variety of query parameters defined in the request body. The following is a detailed description of the requestBody required to successfully call this endpoint:\n\n### Request Body\n\nThe request body must be in JSON format and contain the following fields:\n\n1. `field_ids` (required): An array of field ID strings specifying which fields to include as columns in the search result entities. These field IDs correspond to specific attributes of the Fund entities that you want to retrieve.\n\n2. `query` (required): An array of Predicate objects that define the search criteria. Each Predicate object must include:\n   - `type`: The type of query, which must be set to \"predicate\".\n   - `field_id`: The field to operate on, which should match one of the Fund entity's attributes.\n   - `operator_id`: An operator from the `OperatorsEnum` that defines the comparison operation, such as \"eq\" for equals, \"gt\" for greater than, \"lte\" for less than or equal to, etc.\n   - `values`: An array of values that the `field_id` will be compared against using the specified `operator_id`.\n\n3. `order` (optional): An array of Order objects that specify the order in which the search results should be returned. Each Order object includes:\n   - `field_id`: Name of the field to sort on.\n   - `sort`: Direction of sorting, either \"asc\" for ascending or \"desc\" for descending.\n   - `nulls`: Whether to include null values at the beginning or end of the sort, with \"first\" or \"last\" as possible values.\n\n4. `limit` (optional): An integer specifying the number of rows to return. The default is 100, with a minimum of 1 and a maximum of 2000.\n\n5. `before_id` (optional): A UUID string used to paginate search results to the previous page. It should be the UUID of the first item in the current page. It cannot be provided simultaneously with `after_id`.\n\n6. `after_id` (optional): A UUID string used to paginate search results to the next page. It should be the UUID of the last item in the current page. It cannot be provided simultaneously with `before_id`.\n\n### Example Request Body\n\n```json\n{\n  \"field_ids\": [\n    \"identifier\",\n    \"name\",\n    \"money_raised\"\n  ],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"money_raised\",\n      \"operator_id\": \"gte\",\n      \"values\": [\n        {\n          \"currency\": \"USD\",\n          \"value\": 1000000\n        }\n      ]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"money_raised\",\n      \"sort\": \"desc\"\n    }\n  ],\n  \"limit\": 50\n}\n```\n\nThis example request body searches for Fund entities that have raised at least $1,000,000, including the identifier, name, and money_raised fields in the results, ordering the results by the money_raised field in descending order, and limiting the results to 50 records.\n\nMake sure to set the `Content-Type` header to `application/json` when making the POST request to `/searches/funds`.", "/searches/event_appearances": "The requestBody for the `/searches/event_appearances` endpoint is a JSON object that contains the search query parameters for finding Event Appearance entities in the system. The requestBody is required and must be in `application/json` format. The schema for the requestBody is defined by the `EntitySearch` schema in the components section of the OpenAPI document.\n\nHere is a detailed description of the requestBody, including nested fields and examples:\n\n- `field_ids` (required): An array of field IDs that specify the fields to include as columns in the search result entities. These strings identify the specific data fields that should be returned for each matching entity.\n  - Example: `[\"field_id_1\", \"field_id_2\"]`\n\n- `query` (required): An array of `Predicate` objects that define the search criteria. Each `Predicate` object represents a simple search criterion with the following properties:\n  - `type`: Must be set to `\"predicate\"` to indicate a simple search criterion.\n  - `field_id`: The field to operate on. This is a string that identifies the specific field in the entity that the search will target.\n  - `operator_id`: The operator to use for the search. It is one of the enumerated string values defined in the `OperatorsEnum` schema, such as `\"eq\"` for equal, `\"contains\"` for contains, and so on.\n  - `values`: An array of values corresponding to the `field_id` type that the search will use to filter the entities.\n\n- `order`: An array of `Order` objects that specify the ordering of the search results. Each `Order` object contains the following properties:\n  - `field_id`: The name of the field to sort on.\n  - `sort`: The direction of sorting, either `\"asc\"` for ascending or `\"desc\"` for descending.\n  - `nulls`: Indicates where to place null values in the sorting order, either `\"first\"` or `\"last\"`.\n\n- `limit`: An integer that specifies the number of rows to return. The default is 100, with a minimum of 1 and a maximum of 2000.\n\n- `before_id`: A UUID string used for pagination to retrieve the previous page of results. It should be the UUID of the first item in the current page. It cannot be provided simultaneously with `after_id`.\n\n- `after_id`: A UUID string used for pagination to retrieve the next page of results. It should be the UUID of the last item in the current page. It cannot be provided simultaneously with `before_id`.\n\nHere is an example JSON requestBody that searches for Event Appearance entities where the `event_id` is equal to a specific UUID and orders the results by a `created_at` field in descending order, with a limit of 10 results:\n\n```json\n{\n  \"field_ids\": [\"event_id\", \"participant_id\", \"appearance_type\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"event_id\",\n      \"operator_id\": \"eq\",\n      \"values\": [\"123e4567-e89b-12d3-a456-426614174000\"]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"created_at\",\n      \"sort\": \"desc\",\n      \"nulls\": \"last\"\n    }\n  ],\n  \"limit\": 10\n}\n```\n\nThis requestBody would return up to 10 Event Appearance entities associated with the specified event ID, including the participant ID and appearance type for each, ordered by their creation date in descending order.", "/searches/ipos": "The requestBody for the `/searches/ipos` endpoint in the OpenAPI schema is structured to accept a JSON payload that defines a search query for Initial Public Offerings (IPOs). The requestBody is required for the POST request, and it must be in `application/json` format. The schema for the requestBody is referenced from the `EntitySearch` object within the `components/schemas` section of the OpenAPI document.\n\nHere is a detailed description of the `EntitySearch` schema and its nested fields:\n\n- `field_ids` (required): An array of strings specifying the fields to include as columns in the search result entities. These should be the identifiers of the fields you want to retrieve in your search results.\n  \n- `query` (required): This is an array of `Predicate` objects that define the search criteria. Each `Predicate` object is a simple search criterion with the following properties:\n  - `type`: A string that should always be set to \"predicate\" to indicate the type of query.\n  - `field_id`: A string that specifies the field to operate on.\n  - `operator_id`: An enum that specifies the operator to apply to the field. The `OperatorsEnum` provides a list of possible operators such as \"eq\" (equal), \"contains\", \"gt\" (greater than), \"lt\" (less than), etc.\n  - `values`: An array of objects containing the values to compare against the field specified by `field_id`. The data type of these values should match the type of the field.\n\n- `order`: An array of `Order` objects that specify how the search results should be ordered. Each `Order` object includes:\n  - `field_id`: The name of the field to sort on.\n  - `sort`: The direction of sorting, which can be \"asc\" (ascending) or \"desc\" (descending).\n  - `nulls`: Specifies whether to include null values at the beginning or end of the sort. Defaults to \"last\".\n\n- `limit`: An integer that specifies the number of rows to return. The default is 100, with a minimum of 1 and a maximum of 2000.\n\n- `before_id`: A UUID string used to paginate search results to the previous page. It should be the UUID of the first item in the current page.\n\n- `after_id`: A UUID string used to paginate search results to the next page. It should be the UUID of the last item in the current page.\n\nHere is an example of a JSON payload that could be sent in the requestBody to search for IPOs:\n\n```json\n{\n  \"field_ids\": [\"identifier\", \"went_public_on\", \"money_raised\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"went_public_on\",\n      \"operator_id\": \"gte\",\n      \"values\": [\n        {\n          \"value\": \"2020-01-01\"\n        }\n      ]\n    },\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"money_raised\",\n      \"operator_id\": \"gt\",\n      \"values\": [\n        {\n          \"value\": 100000000\n        }\n      ]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"went_public_on\",\n      \"sort\": \"desc\"\n    }\n  ],\n  \"limit\": 50\n}\n```\n\nThis JSON payload requests IPOs that went public on or after January 1, 2020, raised more than $100 million, and orders the results by the date they went public in descending order, with a limit of 50 results.", "/searches/ownerships": "The `/searches/ownerships` endpoint of the API allows clients to search for Ownership entities based on complex filtering criteria defined in the request body. The `requestBody` is required for this endpoint and must be in JSON format.\n\nHere is a detailed description of the `requestBody` for the `/searches/ownerships` endpoint:\n\n- **field_ids**: An array of field ID strings that specify which fields to include as columns in the search result entities. This field is required.\n  - Example: `[\"uuid\", \"owner_identifier\", \"ownee_identifier\"]`\n\n- **query**: An array of `Predicate` objects that define the search criteria. Each `Predicate` object contains the following properties:\n  - **type**: Fixed to the string \"predicate\" to indicate the type of query.\n  - **field_id**: The field to operate on.\n  - **operator_id**: The operator to use for the search, which can be one of several values such as \"eq\" for equal, \"contains\" for substring match, \"gt\" for greater than, etc.\n  - **values**: An array of values that match the data type of the `field_id`. These are the values to compare against the field specified by `field_id`.\n  - Example: `[{\"type\": \"predicate\", \"field_id\": \"owner_identifier\", \"operator_id\": \"eq\", \"values\": [{\"uuid\": \"123e4567-e89b-12d3-a456-426614174000\"}]}]`\n\n- **order**: An array of `Order` objects that specify the sorting order of the search results. Each `Order` object contains the following properties:\n  - **field_id**: Name of the field to sort on.\n  - **sort**: Direction of sorting, either \"asc\" for ascending or \"desc\" for descending.\n  - **nulls**: Whether to include null values at the beginning or end of the sort, with \"first\" or \"last\" as possible values. Defaults to \"last\".\n  - Example: `[{\"field_id\": \"created_at\", \"sort\": \"desc\", \"nulls\": \"last\"}]`\n\n- **limit**: The number of rows to return. The default is 100, and the minimum is 1, and the maximum is 2000.\n  - Example: `100`\n\n- **before_id**: Used to paginate search results to the previous page. This should be the UUID of the first item in the current page. It cannot be provided simultaneously with `after_id`.\n  - Example: `\"123e4567-e89b-12d3-a456-426614174000\"`\n\n- **after_id**: Used to paginate search results to the next page. This should be the UUID of the last item in the current page. It cannot be provided simultaneously with `before_id`.\n  - Example: `\"123e4567-e89b-12d3-a456-426614174000\"`\n\nHere is an example JSON `requestBody` that could be used to search for Ownership entities where the `owner_identifier` is equal to a specific UUID, including the UUID and owner/ownee identifiers in the results, sorted by the date created in descending order, with a limit of 100 results per page:\n\n```json\n{\n  \"field_ids\": [\"uuid\", \"owner_identifier\", \"ownee_identifier\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"owner_identifier\",\n      \"operator_id\": \"eq\",\n      \"values\": [{\"uuid\": \"123e4567-e89b-12d3-a456-426614174000\"}]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"created_at\",\n      \"sort\": \"desc\",\n      \"nulls\": \"last\"\n    }\n  ],\n  \"limit\": 100\n}\n```\n\nThis JSON should be included in the body of the POST request to the `/searches/ownerships` endpoint with the `Content-Type` header set to `application/json`.", "/searches/categories": "The requestBody for the `/searches/categories` endpoint in the provided OpenAPI schema is designed to receive a JSON object that adheres to the `EntitySearch` schema for performing complex searches on category entities. Below is a detailed description of the expected structure of the requestBody, including nested fields and examples:\n\n### Request Body Structure\n\n```json\n{\n  \"field_ids\": [\"array of field_id strings\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"string\",\n      \"operator_id\": \"operator\",\n      \"values\": [\"array of values matching field_id type\"]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"string\",\n      \"sort\": \"asc | desc\",\n      \"nulls\": \"first | last\"\n    }\n  ],\n  \"limit\": \"integer\",\n  \"before_id\": \"uuid string\",\n  \"after_id\": \"uuid string\"\n}\n```\n\n### Fields Description\n\n- `field_ids`: An array of strings representing the fields to include as columns in the search result entities.\n\n- `query`: An array of predicate objects that define the search criteria.\n  - `type`: Always set to `\"predicate\"` for search criteria.\n  - `field_id`: The field identifier on which the search operation is performed.\n  - `operator_id`: The operator used for the search, such as `eq` (equal), `contains` (string contains), `gt` (greater than), etc.\n  - `values`: An array of values that the search will attempt to match against the `field_id`.\n\n- `order`: An array of objects that define the order in which search results should be returned.\n  - `field_id`: The name of the field to sort on.\n  - `sort`: The direction of sorting, either `\"asc\"` for ascending or `\"desc\"` for descending.\n  - `nulls`: Determines the placement of null values in the sort order. Can be `\"first\"` or `\"last\"`.\n\n- `limit`: An integer that specifies the number of rows to return. The default is usually 100, and there may be a specified maximum limit.\n\n- `before_id`: A UUID string used for pagination to get the previous page of results.\n\n- `after_id`: A UUID string used for pagination to get the next page of results.\n\n### Examples\n\n#### Example 1: Search for categories with a specific name\n\n```json\n{\n  \"field_ids\": [\"name\", \"uuid\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"name\",\n      \"operator_id\": \"eq\",\n      \"values\": [\"Software\"]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"name\",\n      \"sort\": \"asc\"\n    }\n  ],\n  \"limit\": 10\n}\n```\n\n#### Example 2: Search for categories ordered by UUID with pagination\n\n```json\n{\n  \"field_ids\": [\"name\", \"uuid\"],\n  \"query\": [],\n  \"order\": [\n    {\n      \"field_id\": \"uuid\",\n      \"sort\": \"asc\"\n    }\n  ],\n  \"limit\": 50,\n  \"after_id\": \"last-uuid-from-previous-page\"\n}\n```\n\n### Usage Notes\n\n- The `field_ids` should correspond to the fields available in the `Category` schema or other related schemas if they are included in the search.\n- The `query` array can contain multiple predicates for more complex searches.\n- The `limit`, `before_id`, and `after_id` fields are used for controlling pagination. Only one of `before_id` or `after_id` should be provided at a time.\n- The `order` field is optional, and if not provided, the default sort order will be applied.\n\nWhen calling the `/searches/categories` endpoint, the client should send a POST request with a JSON payload that matches the structure described above. The server will then return a list of category entities that match the search criteria, ordered and paginated as specified.", "/searches/category_groups": "The requestBody of the `/searches/category_groups` endpoint is designed to allow clients to search for Category Group entities based on a complex query defined in the request body. The requestBody schema is referenced from `#/components/schemas/EntitySearch`, and it requires certain fields to be included in the JSON payload of the POST request.\n\nHere is the detailed description of the requestBody for the `/searches/category_groups` endpoint:\n\n- **field_ids**: An array of field_id strings that specify the fields to be included as columns in the search result entities. This field is required.\n- **query**: An array of Predicate objects that define the search criteria. Each Predicate object must have a type (which is always \"predicate\"), a field_id (specifying the field to operate on), an operator_id (specifying the search operator), and an array of values that match the field_id type. The operators can include \"eq\" (equal), \"not_eq\" (not equal), \"gt\" (greater than), \"gte\" (greater than or equal), \"lt\" (less than), \"lte\" (less than or equal), \"contains\", \"not_contains\", \"starts\", \"includes\", \"includes_all\", \"not_includes\", \"not_includes_all\", etc.\n- **order**: An array of Order objects that define the order in which the search results should be returned. Each Order object must specify the field_id to sort on, the sort direction (\"asc\" for ascending or \"desc\" for descending), and optionally where to place null values (\"first\" or \"last\").\n- **limit**: An integer specifying the number of rows to return. The default is 100, and the maximum is 2000.\n- **before_id**: A UUID string used to paginate search results to the previous page. It should be the uuid of the first item in the current page. It cannot be provided simultaneously with after_id.\n- **after_id**: A UUID string used to paginate search results to the next page. It should be the uuid of the last item in the current page. It cannot be provided simultaneously with before_id.\n\nHere is an example JSON payload for the requestBody:\n\n```json\n{\n  \"field_ids\": [\"name\", \"uuid\", \"created_at\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"name\",\n      \"operator_id\": \"contains\",\n      \"values\": [\"Software\"]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"created_at\",\n      \"sort\": \"desc\"\n    }\n  ],\n  \"limit\": 50,\n  \"after_id\": \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\nThis example payload requests a search for Category Group entities with names that contain the word \"Software\", includes the fields \"name\", \"uuid\", and \"created_at\" in the results, orders the results by the creation date in descending order, limits the results to 50, and paginates to the next page starting after the specified UUID.", "/searches/locations": "The requestBody for the POST request to `/searches/locations` endpoint is designed to receive a JSON object that contains search query parameters for performing complex filtering on location entities. The requestBody is required for the request to be successful.\n\nHere is a detailed description of the requestBody expected by the endpoint:\n\n- **field_ids**: An array of strings representing the fields to include as columns in the search result entities. This is a required attribute.\n  \n- **query**: An array of `Predicate` objects that define the search criteria. Each `Predicate` object must include:\n  - `type`: A string set to \"predicate\" (required).\n  - `field_id`: A string representing the field to operate on (required).\n  - `operator_id`: A string representing the operation to perform, such as \"eq\" for equals, \"contains\" for substring match, etc. (required).\n  - `values`: An array of objects with data types matching the `field_id` type.\n\n- **order**: An array of `Order` objects that specify the order in which the search results should be returned. Each `Order` object must include:\n  - `field_id`: A string representing the name of the field to sort on (required).\n  - `sort`: A string representing the direction of sorting, either \"asc\" for ascending or \"desc\" for descending. The default is \"asc\".\n  - `nulls`: A string specifying whether to include null values at the beginning or end of the sort. Defaults to \"last\".\n\n- **limit**: An integer representing the number of rows to return. The default is 100, with a minimum of 1 and a maximum of 2000.\n\n- **before_id**: A string in UUID format used to paginate search results to the previous page. It should be the UUID of the first item in the current page. It cannot be provided simultaneously with `after_id`.\n\n- **after_id**: A string in UUID format used to paginate search results to the next page. It should be the UUID of the last item in the current page. It cannot be provided simultaneously with `before_id`.\n\nHere is an example of a requestBody that could be sent to the `/searches/locations` endpoint:\n\n```json\n{\n  \"field_ids\": [\"name\", \"location_type\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"location_type\",\n      \"operator_id\": \"eq\",\n      \"values\": [{\"value\": \"city\"}]\n    },\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"name\",\n      \"operator_id\": \"starts\",\n      \"values\": [{\"value\": \"San\"}]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"name\",\n      \"sort\": \"asc\"\n    }\n  ],\n  \"limit\": 50,\n  \"after_id\": \"last-uuid-from-previous-request\"\n}\n```\n\nThis requestBody would search for location entities where the `location_type` is \"city\" and the `name` starts with \"San\". The results would be sorted by `name` in ascending order, limited to 50 results, and paginated starting after the last UUID from the previous request.", "/searches/jobs": "To successfully call the `/searches/jobs` endpoint of the API, you need to send a POST request with a JSON body that contains the search query parameters. The requestBody schema is defined by the `EntitySearch` schema, which includes several fields that allow you to define a complex search query. Here is a detailed description of the requestBody for the `/searches/jobs` endpoint:\n\n- `field_ids` (required): An array of field ID strings that specify the fields to include as columns in the search result entities. These field IDs determine which attributes of the Job entities will be returned in the search results.\n\n- `query` (required): An array of `Predicate` objects that define the search criteria. Each `Predicate` object includes the following fields:\n  - `type`: The type of query, which should be set to \"predicate\".\n  - `field_id`: The field to operate on, specified by its field ID.\n  - `operator_id`: The operator that defines the type of comparison or operation to perform on the field. This must be one of the following enum values: \"blank\", \"eq\", \"not_eq\", \"gt\", \"gte\", \"lt\", \"lte\", \"starts\", \"contains\", \"between\", \"includes\", \"not_includes\", \"includes_all\", \"not_includes_all\", \"domain_eq\", \"domain_blank\".\n  - `values`: An array of values that the field should be compared against, with the data type matching the field_id type.\n\n- `order`: An array of `Order` objects that specify the order in which the search results should be returned. Each `Order` object includes the following fields:\n  - `field_id`: The name of the field to sort on.\n  - `sort`: The direction of sorting, either \"asc\" for ascending or \"desc\" for descending.\n  - `nulls`: Specifies whether to include null values at the beginning or end of the sort, with possible values \"first\" or \"last\".\n\n- `limit`: An integer that defines the number of rows to return. The default is 100, with a minimum of 1 and a maximum of 2000.\n\n- `before_id`: Used to paginate search results to the previous page. This should be the UUID of the first item in the current page. It cannot be provided simultaneously with `after_id`.\n\n- `after_id`: Used to paginate search results to the next page. This should be the UUID of the last item in the current page. It cannot be provided simultaneously with `before_id`.\n\nHere is an example JSON body for a search request to find jobs with a title containing \"Engineer\", limited to 50 results, and ordered by the creation date in descending order:\n\n```json\n{\n  \"field_ids\": [\"job_title\", \"organization_identifier\", \"is_current\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"title\",\n      \"operator_id\": \"contains\",\n      \"values\": [\"Engineer\"]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"created_at\",\n      \"sort\": \"desc\"\n    }\n  ],\n  \"limit\": 50\n}\n```\n\nThis request will return the specified fields for up to 50 job entities where the title contains the word \"Engineer\", sorted by the most recently created jobs first.", "/searches/key_employee_changes": "The requestBody for the `/searches/key_employee_changes` endpoint in the OpenAPI schema requires a JSON object that follows the `EntitySearch` schema. The `EntitySearch` schema is used to define the parameters for performing a search on key employee changes within an organization. \n\nBelow is a detailed description of the `EntitySearch` schema and how to structure the requestBody for the `/searches/key_employee_changes` endpoint:\n\n### EntitySearch Schema\n\n- `field_ids` (required): An array of field_id strings that specify which fields to include as columns in the search results. These fields define the information you want to retrieve about the key employee changes.\n\n- `query` (required): An array of `Predicate` objects that define the search criteria. Each `Predicate` object represents a simple search criterion.\n\n- `order`: An array of `Order` objects that define the order in which the search results should be returned. Each `Order` object contains the following properties:\n  - `field_id`: The name of the field to sort on.\n  - `sort`: The direction of sorting, which can be \"asc\" for ascending or \"desc\" for descending.\n  - `nulls`: Indicates whether to include null values at the beginning or end of the sort (default is \"last\").\n\n- `limit`: An integer that specifies the number of rows to return. The default is 100, and the maximum is 2000.\n\n- `before_id`: A string in UUID format used to paginate search results to the previous page. It should be the uuid of the first item in the current page.\n\n- `after_id`: A string in UUID format used to paginate search results to the next page. It should be the uuid of the last item in the current page.\n\n### Example requestBody\n\n```json\n{\n  \"field_ids\": [\"field1\", \"field2\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"field_id_to_search\",\n      \"operator_id\": \"eq\",\n      \"values\": [{\"value\": \"specific_value\"}]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"field_to_sort\",\n      \"sort\": \"asc\",\n      \"nulls\": \"last\"\n    }\n  ],\n  \"limit\": 100,\n  \"after_id\": \"last-item-uuid-on-current-page\"\n}\n```\n\nIn the above example, replace `field1` and `field2` with the actual field IDs you wish to include in the results. The `query` array contains a `Predicate` object that searches for records where the field with `field_id_to_search` is equal to `specific_value`. The `order` array specifies that the results should be sorted in ascending order based on `field_to_sort`. The `limit` is set to 100, and pagination is handled using `after_id`.\n\nTo successfully call the `/searches/key_employee_changes` endpoint, you will need to replace the placeholder values with actual search criteria relevant to your use case.", "/searches/layoffs": "The `requestBody` for the `/searches/layoffs` endpoint in the OpenAPI schema is designed to allow users to perform complex searches for layoff entities based on a variety of query parameters. Here's a detailed description of the requestBody structure, including nested fields and examples:\n\n### Request Body Description\n\n#### Search Query Parameters\n\n- **Required**: Yes\n- **Content-Type**: `application/json`\n- **Schema**: The schema is referenced from `#/components/schemas/EntitySearch` which defines the structure of the search query.\n\n#### EntitySearch Schema\n\nThe `EntitySearch` schema is an object that contains the following properties:\n\n- **field_ids** (required): An array of strings representing the fields to include as columns in the search result entities. These are the field IDs that specify which attributes of the layoff entities you want to retrieve.\n  - Example: `[\"uuid\", \"name\", \"type\"]`\n\n- **query** (required): An array of `Predicate` objects that define the search criteria used to filter the layoff entities.\n  - Example: `[{\"type\": \"predicate\", \"field_id\": \"name\", \"operator_id\": \"contains\", \"values\": [{\"value\": \"Tech\"}]}]`\n\n- **order**: An array of `Order` objects that specify the order in which to return the search results.\n  - Example: `[{\"field_id\": \"name\", \"sort\": \"asc\"}]`\n\n- **limit**: An integer that specifies the number of rows to return. The default is 100, and the maximum is 2000.\n  - Example: `50`\n\n- **before_id**: A string in UUID format used to paginate search results to the previous page. It should be the UUID of the first item in the current page.\n  - Example: `\"123e4567-e89b-12d3-a456-426614174000\"`\n\n- **after_id**: A string in UUID format used to paginate search results to the next page. It should be the UUID of the last item in the current page.\n  - Example: `\"123e4567-e89b-12d3-a456-426614174001\"`\n\n#### Predicate Schema\n\nEach `Predicate` object in the `query` array has the following properties:\n\n- **type** (required): A string that must be set to `\"predicate\"` to indicate the type of query.\n- **field_id** (required): A string that specifies the field to operate on.\n- **operator_id** (required): A string that specifies the operator to use for the query. It must be one of the values defined in `#/components/schemas/OperatorsEnum`.\n- **values**: An array of objects that contain the data type matching the `field_id` type. Each object within the array must have a `value` property.\n\n#### Order Schema\n\nEach `Order` object in the `order` array has the following properties:\n\n- **field_id** (required): A string that specifies the name of the field to sort on.\n- **sort**: A string that specifies the direction of sorting. It can be `\"asc\"` for ascending or `\"desc\"` for descending. The default is `\"asc\"`.\n- **nulls**: A string that specifies whether to include null values at the beginning or end of the sort. It can be `\"first\"` or `\"last\"`, with the default being `\"last\"`.\n\n### Example Request Body\n\n```json\n{\n  \"field_ids\": [\"uuid\", \"name\", \"type\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"name\",\n      \"operator_id\": \"contains\",\n      \"values\": [{\"value\": \"Tech\"}]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"name\",\n      \"sort\": \"asc\"\n    }\n  ],\n  \"limit\": 50,\n  \"after_id\": \"123e4567-e89b-12d3-a456-426614174001\"\n}\n```\n\nThis requestBody would search for layoff entities with names containing the word \"Tech\", returning up to 50 results sorted by name in ascending order, starting from the entity after the given `after_id`.", "/searches/addresses": "The requestBody for the POST endpoint `/searches/addresses` is used to define search query parameters for looking up Address entities within a system. The request body is required and must be in JSON format. Below is a detailed description of the requestBody, including nested fields and examples.\n\n### Request Body Structure\n\n- `field_ids`: An array of field IDs that specify which fields to include as columns in the search result entities. These are strings that identify the particular fields of interest.\n- `query`: An array of `Predicate` objects that define the search criteria used to filter the Address entities.\n  - `Predicate`: Each predicate object contains:\n    - `type`: The type of query, which should always be `\"predicate\"`.\n    - `field_id`: A string that specifies the field to operate on.\n    - `operator_id`: A string that specifies the operator to use for comparison. Operators include `\"blank\"`, `\"eq\"`, `\"not_eq\"`, `\"gt\"`, `\"gte\"`, `\"lt\"`, `\"lte\"`, `\"starts\"`, `\"contains\"`, `\"between\"`, `\"includes\"`, `\"not_includes\"`, `\"includes_all\"`, `\"not_includes_all\"`, `\"domain_eq\"`, and `\"domain_blank\"`.\n    - `values`: An array of values to be used with the operator. The data type of these values must match the type of the `field_id`.\n- `order`: An array of `Order` objects that specify the sorting of the search results.\n  - `Order`: Each order object contains:\n    - `field_id`: A string that specifies the name of the field to sort on.\n    - `sort`: A string that specifies the direction of sorting, either `\"asc\"` or `\"desc\"`.\n    - `nulls`: A string that specifies whether to include null values at the beginning or end of the sort, either `\"first\"` or `\"last\"`.\n- `limit`: An integer that specifies the number of rows to return. The default is 100, with a minimum of 1 and a maximum of 2000.\n- `before_id`: A string in UUID format used to paginate search results to the previous page. It should be the UUID of the first item in the current page.\n- `after_id`: A string in UUID format used to paginate search results to the next page. It should be the UUID of the last item in the current page.\n\n### Example Request Body\n\n```json\n{\n  \"field_ids\": [\"uuid\", \"street_1\", \"city\", \"postal_code\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"city\",\n      \"operator_id\": \"eq\",\n      \"values\": [\"San Francisco\"]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"postal_code\",\n      \"sort\": \"asc\"\n    }\n  ],\n  \"limit\": 50,\n  \"after_id\": \"last-uuid-of-previous-page\"\n}\n```\n\nIn this example, the search is for addresses in the city of San Francisco, including the UUID, street address, city, and postal code in the results, ordered by postal code in ascending order, with a limit of 50 results starting after the last UUID provided from the previous page of results.", "/searches/degrees": "The `/searches/degrees` endpoint allows for searching Degree entities with complex filtering based on the provided query parameters in the request body. The requestBody is required and must be in JSON format.\n\n### Request Body Fields:\n\n- `field_ids`: An array of field_id strings to include as columns in the search result entities. This field is required.\n- `query`: An array of `Predicate` objects defining the search criteria. Each `Predicate` must specify the type (`predicate`), the field to operate on (`field_id`), the operator (`operator_id`), and the values to use for the operation. This field is required.\n- `order`: An array of `Order` objects defining the order in which the search results should be returned. Each `Order` must specify the field to sort on (`field_id`), the direction of sorting (`sort`), and whether to include null values at the beginning or end of the sort (`nulls`).\n- `limit`: An integer specifying the number of rows to return. The default is 100, with a minimum of 1 and a maximum of 2000.\n- `before_id`: A UUID string used to paginate search results to the previous page. It should be the UUID of the first item in the current page. This field cannot be provided simultaneously with `after_id`.\n- `after_id`: A UUID string used to paginate search results to the next page. It should be the UUID of the last item in the current page. This field cannot be provided simultaneously with `before_id`.\n\n### Example Request Body:\n\n```json\n{\n  \"field_ids\": [\"uuid\", \"name\", \"school_identifier\", \"person_identifier\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"school_identifier\",\n      \"operator_id\": \"eq\",\n      \"values\": [{\"uuid\": \"school-uuid\"}]\n    },\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"person_identifier\",\n      \"operator_id\": \"contains\",\n      \"values\": [{\"value\": \"John Doe\"}]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"completed_on\",\n      \"sort\": \"desc\",\n      \"nulls\": \"last\"\n    }\n  ],\n  \"limit\": 50\n}\n```\n\nIn this example, the request body is searching for Degree entities from a specific school (`school-uuid`) related to a person with \"John Doe\" in their name. The results are ordered by the completion date in descending order, with null values at the end, and limited to 50 records.\n\n### Use Cases:\n\n1. **Finding Degrees from a Specific School**: To search for all Degree entities awarded by a particular school, include a `Predicate` with the `school_identifier` field, the `eq` operator, and the UUID of the school.\n\n2. **Filtering by Person Name**: To find Degrees associated with a specific person, use a `Predicate` with the `person_identifier` field, the `contains` operator, and the name of the person.\n\n3. **Sorting Results**: To order the search results, use an `Order` object with the desired `field_id` and `sort` direction. Add `nulls` to specify the placement of null values.\n\n4. **Pagination**: To navigate through pages of results, use the `before_id` or `after_id` fields with the corresponding UUIDs from the current page.\n\n5. **Limiting Results**: To control the number of results returned, set the `limit` field to the desired number of records.\n\nRemember to adjust the `field_ids`, `query`, `order`, `limit`, `before_id`, and `after_id` fields according to your specific search requirements.", "/searches/principals": "The requestBody for the `/searches/principals` endpoint in the provided OpenAPI schema is designed to receive a JSON object that defines a search query for Principal entities. The requestBody is required for this POST request, meaning that the endpoint expects a payload with the search parameters to be provided.\n\nHere's a detailed description of the requestBody for `/searches/principals`:\n\n- `field_ids` (required): An array of field ID strings that specify which fields to include as columns in the search result entities. This defines the data that will be returned for each Principal entity that matches the search query.\n- `query` (required): An array of Predicate objects that define the search criteria. Each Predicate object consists of:\n  - `type`: A string indicating the type of query, which should be \"predicate\" for simple search criteria.\n  - `field_id`: A string representing the field to operate on.\n  - `operator_id`: An operator from the `OperatorsEnum` schema that defines the comparison operation to be performed on the field. Operators include \"eq\" for equals, \"contains\" for substring match, \"gt\" for greater than, and others as defined in the `OperatorsEnum`.\n  - `values`: An array containing the values to compare against the field. The data type of the values should match the type of the field specified by `field_id`.\n- `order`: An array of Order objects that specify how to sort the search results. Each Order object includes:\n  - `field_id`: A string representing the name of the field to sort on.\n  - `sort`: A string indicating the direction of sorting, either \"asc\" for ascending or \"desc\" for descending.\n  - `nulls`: A string specifying whether to include null values at the beginning or end of the sort, with possible values \"first\" or \"last\".\n- `limit` (optional): An integer representing the number of rows to return. The default is 100, with a minimum of 1 and a maximum of 2000.\n- `before_id` (optional): A UUID string used to paginate search results to the previous page. It should be the UUID of the first item in the current page. It cannot be provided simultaneously with `after_id`.\n- `after_id` (optional): A UUID string used to paginate search results to the next page. It should be the UUID of the last item in the current page. It cannot be provided simultaneously with `before_id`.\n\nHere is an example JSON payload for the requestBody:\n\n```json\n{\n  \"field_ids\": [\"name\", \"location_identifiers\"],\n  \"query\": [\n    {\n      \"type\": \"predicate\",\n      \"field_id\": \"name\",\n      \"operator_id\": \"contains\",\n      \"values\": [\"Tech\"]\n    }\n  ],\n  \"order\": [\n    {\n      \"field_id\": \"name\",\n      \"sort\": \"asc\",\n      \"nulls\": \"last\"\n    }\n  ],\n  \"limit\": 50\n}\n```\n\nThis example searches for Principal entities with a name that contains the substring \"Tech\", orders the results by name in ascending order, and limits the results to 50 entities."}